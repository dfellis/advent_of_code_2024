type File <-- '@std/fs';
fn string <-- '@std/fs';
fn while <-- '@std/seq';

export fn main {
  let input = File('./input.txt').string!!;
  // The input is a map, from it we will extract two pieces of information: where the guard is (and
  // is facing) and where the obstacles are. We'll put the obstacle locations into a Set of i64[2]
  // buffers representing X, Y coordinates and the guard goes into a mutable i64[4] buffer. The
  // first two buffer values represent the X, Y coordinates, and the second two represent the delta
  // direction to *attempt* to move into, which will be mutated to a different direction if there is
  // an obstacle in the chosen direction. Each time the guard's position is updated (including the
  // initial creation), that position will be added to a second `Set{i64[2]}`. When the guard goes
  // out-of-bounds (any of the position coordinates being below zero or equal to the relevant array
  // length) the calculation is complete and the number of values of the guard position set printed.
  let grid = input.trim.split('\n').map(fn (line: string) = line.trim.split(''));
  let guard = {i64[4]}(-1, -1, -1, -1);
  let obstacles = Set{i64[2]}();
  grid.map(fn (line: string[], y: i64) = line.map(fn (char: string, x: i64) {
    if(char == '#', fn {
      obstacles.store({i64[2]}(x, y));
    });
    if(char == '^', fn {
      guard.0 = x;
      guard.1 = y;
      guard.2 = 0;
      guard.3 = -1;
    });
  }));
  let locations = Set{i64[2]}();
  while(fn = guard.0 > -1 && guard.0 < (grid[0]!!).len && guard.1 > -1 && guard.1 < grid.len, fn {
    // First, record the guard's current location (we do this before moving so we don't store an
    // out-of-bounds location)
    locations.store({i64[2]}(guard.0.clone, guard.1.clone)); // Clones for JS generation
    // Now we do one of two things: if there's an obstacle in our way, we rotate the direction. If
    // there is not, we simply move the guard to those coordinates. Since there are only four
    // directions to choose, I looked at all of them and figured out a pair of equations that will
    // compute the new direction based on the prior one: `xNew = yPrev * -1` and `yNew = xPrev`.
    let newLocation = {i64[2]}(guard.0 + guard.2, guard.1 + guard.3);
    if(obstacles.has(newLocation), fn {
      let xNew = guard.3 * -1;
      let yNew = guard.2.clone; // This clone is needed for JS generation
      guard.2 = xNew;
      guard.3 = yNew;
    }, fn {
      guard.0 = newLocation.0;
      guard.1 = newLocation.1;
    });
  });
  locations.len.print;
}
